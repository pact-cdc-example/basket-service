// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ExternalURL mocks base method.
func (m *MockManager) ExternalURL() ExternalURL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalURL")
	ret0, _ := ret[0].(ExternalURL)
	return ret0
}

// ExternalURL indicates an expected call of ExternalURL.
func (mr *MockManagerMockRecorder) ExternalURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalURL", reflect.TypeOf((*MockManager)(nil).ExternalURL))
}

// Postgres mocks base method.
func (m *MockManager) Postgres() Postgres {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Postgres")
	ret0, _ := ret[0].(Postgres)
	return ret0
}

// Postgres indicates an expected call of Postgres.
func (mr *MockManagerMockRecorder) Postgres() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Postgres", reflect.TypeOf((*MockManager)(nil).Postgres))
}

// Server mocks base method.
func (m *MockManager) Server() Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Server")
	ret0, _ := ret[0].(Server)
	return ret0
}

// Server indicates an expected call of Server.
func (mr *MockManagerMockRecorder) Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Server", reflect.TypeOf((*MockManager)(nil).Server))
}
